From 432d893099b01e634e8e624887a2b1ad042cb579 Mon Sep 17 00:00:00 2001
From: Matthew Nelson <developer@matthewnelson.io>
Date: Thu, 18 Jan 2024 13:42:47 -0500
Subject: [PATCH 11/11] Use build-env where possible

---
 Makefile        | 27 ++++++++++++++-------------
 Makefile.common | 35 ++++++++++++++---------------------
 2 files changed, 28 insertions(+), 34 deletions(-)

diff --git a/Makefile b/Makefile
index d963f92..c1713bf 100644
--- a/Makefile
+++ b/Makefile
@@ -21,6 +21,7 @@ SQLITE_ARCHIVE:=$(TARGET)/$(sqlite)-amal.zip
 SQLITE_UNPACKED:=$(TARGET)/sqlite-unpack.log
 SQLITE_SOURCE?=$(TARGET)/$(SQLITE_AMAL_PREFIX)
 SQLITE_HEADER?=$(SQLITE_SOURCE)/sqlite3mc_amalgamation.h
+TAG_BUILD_ENV=0.1.3
 ifneq ($(SQLITE_SOURCE),$(TARGET)/$(SQLITE_AMAL_PREFIX))
 	created := $(shell touch $(SQLITE_UNPACKED))
 endif
@@ -125,10 +126,10 @@ $(NATIVE_DLL): $(SQLITE_OUT)/$(LIBNAME)
 	cp $< $(NATIVE_TARGET_DIR)/$(LIBNAME)
 
 win32: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-windows-x86 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=i686-w64-mingw32.static- OS_NAME=Windows OS_ARCH=x86'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.mingw.x86:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Windows OS_ARCH=x86'
 
 win64: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-windows-x64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=x86_64-w64-mingw32.static- OS_NAME=Windows OS_ARCH=x86_64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.mingw.x86_64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Windows OS_ARCH=x86_64'
 
 win-armv7: $(SQLITE_UNPACKED) jni-header
 	./docker/dockcross-windows-armv7 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=armv7-w64-mingw32- OS_NAME=Windows OS_ARCH=armv7'
@@ -137,10 +138,10 @@ win-arm64: $(SQLITE_UNPACKED) jni-header
 	./docker/dockcross-windows-arm64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=aarch64-w64-mingw32- OS_NAME=Windows OS_ARCH=aarch64'
 
 linux32: $(SQLITE_UNPACKED) jni-header
-	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work toxicity-io/ubuntu16-linux-x86 bash -c 'make clean-native native OS_NAME=Linux OS_ARCH=x86'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.linux-libc.x86:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux OS_ARCH=x86'
 
 linux64: $(SQLITE_UNPACKED) jni-header
-	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work toxicity-io/ubuntu16-linux-x86_64 bash -c 'make clean-native native OS_NAME=Linux OS_ARCH=x86_64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.linux-libc.x86_64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux OS_ARCH=x86_64'
 
 freebsd32: $(SQLITE_UNPACKED) jni-header
 	docker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir empterdose/freebsd-cross-build:9.3 sh -c 'apk add bash; apk add openjdk8; apk add perl; make clean-native native OS_NAME=FreeBSD OS_ARCH=x86 CROSS_PREFIX=i386-freebsd9-'
@@ -167,31 +168,31 @@ linux-armv6: $(SQLITE_UNPACKED) jni-header
 	./docker/dockcross-armv6-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=armv6-unknown-linux-gnueabihf- OS_NAME=Linux OS_ARCH=armv6'
 
 linux-armv7: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-armv7a-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=arm-cortexa8_neon-linux-gnueabihf- OS_NAME=Linux OS_ARCH=armv7'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.linux-libc.armv7a:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux OS_ARCH=armv7'
 
 linux-arm64: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-arm64-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=aarch64-unknown-linux-gnu- OS_NAME=Linux OS_ARCH=aarch64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.linux-libc.aarch64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux OS_ARCH=aarch64'
 
 linux-android-arm: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-android-arm -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/arm-linux-androideabi/bin/arm-linux-androideabi- OS_NAME=Linux-Android OS_ARCH=arm'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.android.armv7a:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux-Android OS_ARCH=arm'
 
 linux-android-arm64: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-android-arm64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/aarch64-linux-android/bin/aarch64-linux-android- OS_NAME=Linux-Android OS_ARCH=aarch64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.android.aarch64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux-Android OS_ARCH=aarch64'
 
 linux-android-x86: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-android-x86 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/i686-linux-android/bin/i686-linux-android- OS_NAME=Linux-Android OS_ARCH=x86'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.android.x86:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux-Android OS_ARCH=x86'
 
 linux-android-x64: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-android-x86_64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/x86_64-linux-android/bin/x86_64-linux-android- OS_NAME=Linux-Android OS_ARCH=x86_64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.android.x86_64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux-Android OS_ARCH=x86_64'
 
 linux-ppc64: $(SQLITE_UNPACKED) jni-header
-	./docker/dockcross-ppc64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=powerpc64le-unknown-linux-gnu- OS_NAME=Linux OS_ARCH=ppc64'
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.linux-libc.ppc64le:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Linux OS_ARCH=ppc64'
 
 mac64: $(SQLITE_UNPACKED) jni-header
-	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/workdir -e CROSS_TRIPLE=x86_64-apple-darwin multiarch/crossbuild make clean-native native OS_NAME=Mac OS_ARCH=x86_64
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.macos-lts.x86_64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Mac OS_ARCH=x86_64'
 
 mac-arm64: $(SQLITE_UNPACKED) jni-header
-	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/workdir -e CROSS_TRIPLE=aarch64-apple-darwin gotson/crossbuild make clean-native native OS_NAME=Mac OS_ARCH=aarch64 CROSS_PREFIX="/usr/osxcross/bin/aarch64-apple-darwin20.4-"
+	docker run $(DOCKER_RUN_OPTS) -u $(U_ID):$(G_ID) -v $$PWD:/work 05nelsonm/build-env.macos-lts.aarch64:$(TAG_BUILD_ENV) bash -c 'make clean-native native CROSS_PREFIX=$$CROSS_TRIPLE- OS_NAME=Mac OS_ARCH=aarch64'
 
 # deprecated
 mac32: $(SQLITE_UNPACKED) jni-header
diff --git a/Makefile.common b/Makefile.common
index c6e4ff0..6f9a654 100644
--- a/Makefile.common
+++ b/Makefile.common
@@ -128,29 +128,29 @@ Linux-armv7_LIBNAME   := libsqlitejdbc.so
 Linux-armv7_SQLITE_FLAGS  :=
 
 Linux-Android-arm_CC        := $(CROSS_PREFIX)clang
-Linux-Android-arm_STRIP     := $(CROSS_ROOT)/bin/llvm-strip
-Linux-Android-arm_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog
+Linux-Android-arm_STRIP     := $(CROSS_PREFIX)strip
+Linux-Android-arm_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(PATH_PREBUILT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog
 Linux-Android-arm_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so
 Linux-Android-arm_LIBNAME   := libsqlitejdbc.so
 Linux-Android-arm_SQLITE_FLAGS  :=
 
 Linux-Android-aarch64_CC        := $(CROSS_PREFIX)clang
-Linux-Android-aarch64_STRIP     := $(CROSS_ROOT)/bin/llvm-strip
-Linux-Android-aarch64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog
+Linux-Android-aarch64_STRIP     := $(CROSS_PREFIX)strip
+Linux-Android-aarch64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(PATH_PREBUILT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog -march=armv8-a+crypto -mfpu=crypto-neon-fp-armv8
 Linux-Android-aarch64_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so
 Linux-Android-aarch64_LIBNAME   := libsqlitejdbc.so
 Linux-Android-aarch64_SQLITE_FLAGS  :=
 
 Linux-Android-x86_CC        := $(CROSS_PREFIX)clang
-Linux-Android-x86_STRIP     := $(CROSS_ROOT)/bin/llvm-strip
-Linux-Android-x86_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog -msse4.2 -maes
+Linux-Android-x86_STRIP     := $(CROSS_PREFIX)strip
+Linux-Android-x86_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(PATH_PREBUILT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog -msse4.2 -maes
 Linux-Android-x86_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so
 Linux-Android-x86_LIBNAME   := libsqlitejdbc.so
 Linux-Android-x86_SQLITE_FLAGS  :=
 
 Linux-Android-x86_64_CC        := $(CROSS_PREFIX)clang
-Linux-Android-x86_64_STRIP     := $(CROSS_ROOT)/bin/llvm-strip
-Linux-Android-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog -msse4.2 -maes
+Linux-Android-x86_64_STRIP     := $(CROSS_PREFIX)strip
+Linux-Android-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(PATH_PREBUILT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog -msse4.2 -maes
 Linux-Android-x86_64_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so
 Linux-Android-x86_64_LIBNAME   := libsqlitejdbc.so
 Linux-Android-x86_64_SQLITE_FLAGS  :=
@@ -218,23 +218,16 @@ HPUX-ia64_32_LINKFLAGS	:= -b
 HPUX-ia64_32_LIBNAME	:= libsqlitejdbc.so
 HPUX-ia64_32_SQLITE_FLAGS :=
 
-Mac-x86_64_CC        := gcc -arch $(OS_ARCH) 
-Mac-x86_64_STRIP     := strip -x
-MAC_SDK := /Developer/SDKs/MacOSX10.10.sdk
-ifeq ($(wildcard MAC_SDK),)
-	MAC_SDK := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk
-endif
-Mac-x86_64_CCFLAGS    := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -Ilib/inc_mac -Os -fPIC -mmacosx-version-min=10.7 -fvisibility=hidden -Wno-implicit-function-declaration -msse4.2 -maes
+Mac-x86_64_CC        := $(CROSS_PREFIX)clang
+Mac-x86_64_STRIP     := $(CROSS_PREFIX)strip -x
+Mac-x86_64_CCFLAGS    := -I$(PATH_SDK)/System/Library/Frameworks/JavaNativeFoundation.framework/Headers -Ilib/inc_mac -Os -fPIC -fvisibility=hidden -Wno-implicit-function-declaration -msse4.2 -maes
 Mac-x86_64_LINKFLAGS := -dynamiclib -framework Security
 Mac-x86_64_LIBNAME   := libsqlitejdbc.dylib
 Mac-x86_64_SQLITE_FLAGS  := 
 
-# Use a CROSS_PREFIX as the cross-triple clang is not available in crossbuild, see https://github.com/multiarch/crossbuild/blob/ad79cc84b6fb3fb1d09bc4a78719ef26f23bab85/Dockerfile#L134
-# When running on a M1 mac, CROSS_PREFIX will be empty, and 'make native' can still build
 Mac-aarch64_CC        := $(CROSS_PREFIX)clang
 Mac-aarch64_STRIP     := $(CROSS_PREFIX)strip -x
-MAC_SDK := /usr/osxcross/SDK/MacOSX11.3.sdk
-Mac-aarch64_CCFLAGS    := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -Ilib/inc_mac -Os -fPIC -mmacosx-version-min=10.9 -fvisibility=hidden -Wno-implicit-function-declaration
+Mac-aarch64_CCFLAGS    := -I$(PATH_SDK)/System/Library/Frameworks/JavaNativeFoundation.framework/Headers -Ilib/inc_mac -Os -fPIC -fvisibility=hidden -Wno-implicit-function-declaration
 Mac-aarch64_LINKFLAGS  := -dynamiclib -framework Security
 Mac-aarch64_LIBNAME    := libsqlitejdbc.dylib
 Mac-aarch64_SQLITE_FLAGS := 
@@ -242,14 +235,14 @@ Mac-aarch64_SQLITE_FLAGS :=
 Windows-x86_CC           := $(CROSS_PREFIX)gcc
 Windows-x86_STRIP        := $(CROSS_PREFIX)strip
 Windows-x86_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os -msse4.2 -maes
-Windows-x86_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc
+Windows-x86_LINKFLAGS    := -Wl,--kill-at -Wl,--no-insert-timestamp -shared -static-libgcc
 Windows-x86_LIBNAME      := sqlitejdbc.dll
 Windows-x86_SQLITE_FLAGS := 
 
 Windows-x86_64_CC           := $(CROSS_PREFIX)gcc
 Windows-x86_64_STRIP        := $(CROSS_PREFIX)strip
 Windows-x86_64_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os -msse4.2 -maes
-Windows-x86_64_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc
+Windows-x86_64_LINKFLAGS    := -Wl,--kill-at -Wl,--no-insert-timestamp -shared -static-libgcc
 Windows-x86_64_LIBNAME      := sqlitejdbc.dll
 Windows-x86_64_SQLITE_FLAGS :=
 
-- 
2.34.1

